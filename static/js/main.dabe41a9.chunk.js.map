{"version":3,"sources":["images/bkground.jpg","images/cover.jpg","images/p1.jpg","images/p2.jpg","images/p3.jpg","images/p4.jpg","images/p5.jpg","Banner.js","Button.js","PageImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","className","src","Background","href","styles","fontSize","color","backgroundColor","borderRadius","cursor","marginBottom","Button","style","onClick","this","props","choosePage","React","Component","height","minWidth","PageImage","PAGE","cover","Cover","p1","Page1","p2","Page2","p3","Page3","p4","Page4","p5","Page5","App","state","bind","currentState","setState","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,qQCmB5BC,MAff,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAAYC,IAAKC,OAEpC,yBAAKF,UAAU,kBACX,wBAAIA,UAAU,SAAd,2BACA,wBAAIA,UAAU,UAAd,cAEJ,uBAAGA,UAAU,MAAMG,KAAK,uEAAxB,mBCZNC,EAAS,CACXC,SAAU,GACVC,MAAO,SACPC,gBAAiB,QACjBC,aAAc,GACdC,OAAQ,UACRC,aAAc,IAGLC,EAAb,iLAEQ,OACI,4BAAQC,MAAOR,EAAQS,QAASC,KAAKC,MAAMC,YAA3C,iBAHZ,GAA4BC,IAAMC,WCT5Bd,EAAS,CACXe,OAAQ,IACRC,SAAU,OAGDC,EAAb,iLAEQ,OACI,6BACI,yBAAKT,MAAOR,EAAQH,IAAKa,KAAKC,MAAMd,WAJpD,GAA+BgB,IAAMC,W,sGCO/BI,EAAO,CACXC,MAAOC,IACPC,GAAIC,IACJC,GAAIC,IACJC,GAAIC,IACJC,GAAIC,IACJC,GAAIC,KA2CSC,E,YAvCb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAM,CAAEnC,IAAKqB,EAAKC,OACvB,EAAKP,WAAW,EAAKA,WAAWqB,KAAhB,gBAHC,E,0EAMjB,IAAMC,EAAexB,KAAKsB,MAAMnC,IAC5BqC,GAAgBhB,EAAKC,MACrBT,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKG,KACnBa,GAAgBhB,EAAKG,GAC5BX,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKK,KACnBW,GAAgBhB,EAAKK,GAC5Bb,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKO,KACnBS,GAAgBhB,EAAKO,GAC5Bf,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKS,KACnBO,GAAgBhB,EAAKS,GAC5BjB,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKW,KACnBK,GAAgBhB,EAAKW,IAC5BnB,KAAKyB,SAAS,CAAEtC,IAAKqB,EAAKC,U,+BAI9B,OACE,kBAAC,IAAD,CAAYiB,SAAS,KACnB,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAWA,UAAU,MAAMC,IAAKa,KAAKsB,MAAMnC,OAE7C,yBAAKD,UAAU,cACb,kBAAC,EAAD,CAAQgB,WAAYF,KAAKE,oB,GA/BnBC,IAAMC,WCXJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dabe41a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bkground.21fa2687.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover.1af616d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/p1.357ab4a8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/p2.c800bef2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/p3.79b22360.jpg\";","module.exports = __webpack_public_path__ + \"static/media/p4.fbc918b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/p5.41fb5202.jpg\";","import React from 'react';\nimport './banner.css';\nimport Background from './images/bkground.jpg';\n\nfunction Banner() {\n    return(\n        <div className='banner'>\n            <div className='container'>\n                <img className='bannerPic' src={Background} />\n            </div>\n            <div className='titleContainer'>\n                <h1 className='title'>Drinnglennin Chronicles</h1>\n                <h2 className='author'>KC Julius</h2>\n            </div>\n            <a className='buy' href=' https://www.amazon.com/dp/3948458006/ref=cm_sw_em_r_mt_dp_U_PoUsEb'>Buy on Amazon</a>\n        </div>\n    );\n}\n\nexport default Banner;","import React from 'react';\n\nconst styles = {\n    fontSize: 30,\n    color: 'purple',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    cursor: 'pointer',\n    marginBottom: 50\n};\n\nexport class Button extends React.Component {\n    render() {\n        return(\n            <button style={styles} onClick={this.props.choosePage}>Next Page</button>\n        );\n    }\n}","import React from 'react';\n\nconst styles = {\n    height: 750,\n    minWidth: '50%'\n};\n\nexport class PageImage extends React.Component {\n    render() {\n        return(\n            <div>\n                <img style={styles} src={this.props.src} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\nimport Banner from './Banner';\nimport { Button } from './Button';\nimport { PageImage } from './PageImage';\nimport Cover from './images/cover.jpg';\nimport Page1 from './images/p1.jpg';\nimport Page2 from './images/p2.jpg'\nimport Page3 from './images/p3.jpg'\nimport Page4 from './images/p4.jpg'\nimport Page5 from './images/p5.jpg'\n\nconst PAGE = {\n  cover: Cover,\n  p1: Page1,\n  p2: Page2,\n  p3: Page3,\n  p4: Page4,\n  p5: Page5\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={ src: PAGE.cover };\n    this.choosePage=this.choosePage.bind(this);\n  }\n  choosePage() {\n    const currentState = this.state.src;\n    if (currentState == PAGE.cover) {\n        this.setState({ src: PAGE.p1});\n    } else if (currentState == PAGE.p1) {\n        this.setState({ src: PAGE.p2});\n    } else if (currentState == PAGE.p2) {\n        this.setState({ src: PAGE.p3});\n    } else if (currentState == PAGE.p3) {\n        this.setState({ src: PAGE.p4});\n    } else if (currentState == PAGE.p4) {\n        this.setState({ src: PAGE.p5});\n    } else if (currentState == PAGE.p5) {\n        this.setState({ src: PAGE.cover});\n    }\n  }\n  render() {\n    return ( //add pages under banner\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <Banner />\n          <div className='picContainer'>\n            <PageImage className='pic' src={this.state.src} />\n          </div>\n          <div className='buttonWrap'>\n            <Button choosePage={this.choosePage} />\n          </div>\n        </div>\n      </HashRouter>\n      \n    );\n  }\n}\n\nexport default App;\n\n/*modules to add:\n1) pages dispayer\n  render return \n  button\n  page image\n2) pages changer - stateless\n  render image \n3) button - event handler + render button\n\n*/\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}